import groovy.xml.MarkupBuilder

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply from: '../dependencies.gradle'
apply from: '../spotless.gradle'
apply plugin: 'com.github.ben-manes.versions'
//apply plugin: 'com.google.firebase.crashlytics'
kapt {
    correctErrorTypes = true
    useBuildCache = true
}
androidExtensions {
    experimental = true
}

android {

    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        applicationId "com"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        multiDexEnabled true
        buildConfigField("String", "APP_KEY", API_KEY)
        buildConfigField("String", "JSON_VERSION", '"v1"')
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "app"

    productFlavors {

        waterRippleLwp {
            applicationIdSuffix = ".sami.rippel.allah"
            dimension "app"
            versionCode 144012
            versionName "4.1.1"
            buildConfigField("String", "APP_INTERTITIAL_KEY", ADS_INTERTITIAL_KEY_SFAXDROID)
            manifestPlaceholders = [hostName: "ca-app-pub-6263632629106733~1726613607"]
        }

        scaryallwhotouch {
            applicationIdSuffix = ".liliagame.scarewhotouchme"
            dimension "app"
            resConfigs('ar', 'xxhdpi')
            versionCode 11
            versionName "2.1"
            buildConfigField("String", "APP_INTERTITIAL_KEY", ADS_INTERTITIAL_KEY_LILIAGAME)
            manifestPlaceholders = [hostName: "ca-app-pub-6263632629106733~4067989099"]
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/MANIFEST.MF'
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        checkDependencies true
        ignoreTestSources true
        disable 'StringFormatMatches'
        disable 'Instantiatable'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true

    rejectVersionIf {
        isNonStable(candidate.version)
    }

    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }

    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }

    outputFormatter = { result ->
        def updatable = result.outdated.dependencies
        if (!updatable.isEmpty()) {
            def writer = new StringWriter()
            def html = new MarkupBuilder(writer)
            html.html {
                body {
                    table {
                        thead {
                            tr {
                                td("Group")
                                td("Module")
                                td("Current version")
                                td("Latest version")
                            }
                        }
                        tbody {
                            updatable.each { dependency ->
                                tr {
                                    td(dependency.group)
                                    td(dependency.name)
                                    td(dependency.version)
                                    td(dependency.available.release ?: dependency.available.milestone)
                                }
                            }
                        }
                    }
                }
            }
            //TODO to File
            println writer.toString()
        }
    }
}


dependencies {
    kapt Libs.hilt.hiltAndroidComplier
    kapt Libs.hilt.hiltComplier
    implementation Libs.kotlin.coroutinesAndroid
    implementation Libs.navigation.fragmentNavktx
    implementation Libs.navigation.navigationKtx
    implementation Libs.hilt.hiltLib
    implementation Libs.hilt.hiltViewModel
    implementation Libs.androidx.appcompat
    implementation Libs.androidx.multidex
    implementation Libs.androidx.recyclerview
    implementation Libs.androidx.constraintlayout
    implementation Libs.retrofit.retrofit
    implementation Libs.google.material
    implementation Libs.google.servicesAds
    implementation Libs.google.core
    implementation Libs.google.coreKtx
    implementation Libs.glide.glide
    implementation project(':download-file-module')
    implementation project(':base-android')
    implementation project(':domain')
    implementation project(':ui-detail')
    implementation project(':ui-sky-rajawali-lwp')
    implementation project(':ui-anim-img-lwp')
    implementation project(':ui-anim-word-lwp')
    implementation project(':ui-timer-lwp')
    implementation project(':data-android')
    //implementation libraries.crashlytics
}

apply plugin: 'com.google.gms.google-services'
