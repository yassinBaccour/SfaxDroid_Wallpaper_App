import java.nio.file.Files

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply from: '../dependencies.gradle'

kapt {
    correctErrorTypes = true
    useBuildCache = true
}
androidExtensions {
    experimental = true
}

android {

    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        applicationId "com"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        multiDexEnabled true
        buildConfigField("String", "APP_KEY", API_KEY)
        buildConfigField("String", "JSON_VERSION", '"v1"')
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "app"

    productFlavors {

        waterRippleLwp {
            applicationIdSuffix = ".sami.rippel.allah"
            dimension "app"
            versionCode 85
            versionName "8.5"
            buildConfigField("String", "APP_INTERTITIAL_KEY", ADS_INTERTITIAL_KEY_SFAXDROID)
            manifestPlaceholders = [hostName: "ca-app-pub-6263632629106733~1726613607"]
        }

        scaryallwhotouch {
            applicationIdSuffix = ".liliagame.scarewhotouchme"
            dimension "app"
            resConfigs('ar', 'xxhdpi')
            versionCode 30
            versionName "3.0"
            buildConfigField("String", "APP_INTERTITIAL_KEY", ADS_INTERTITIAL_KEY_LILIAGAME)
            manifestPlaceholders = [hostName: "ca-app-pub-6263632629106733~4067989099"]
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/MANIFEST.MF'
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        checkDependencies true
        ignoreTestSources true
        disable 'StringFormatMatches'
        disable 'Instantiatable'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}


dependencies {
    kapt Libs.hilt.hiltAndroidComplier
    kapt Libs.hilt.hiltComplier
    implementation Libs.kotlin.coroutinesAndroid
    implementation Libs.navigation.fragmentNavktx
    implementation Libs.navigation.navigationKtx
    implementation Libs.hilt.hiltLib
    implementation Libs.hilt.hiltViewModel
    implementation Libs.androidx.appcompat
    implementation Libs.androidx.multidex
    implementation Libs.androidx.recyclerview
    implementation Libs.androidx.constraintlayout
    implementation Libs.retrofit.retrofit
    implementation Libs.google.material
    implementation Libs.google.servicesAds
    implementation Libs.google.core
    implementation Libs.google.coreKtx
    implementation Libs.glide.glide
    implementation Libs.other.crashlytics
    implementation Libs.google.firebaseAnalytics
    implementation project(':download-file-module')
    implementation project(':base-android')
    implementation project(':domain')
    implementation project(':ui-detail')
    implementation project(':ui-sky-rajawali-lwp')
    implementation project(':ui-anim-img-lwp')
    implementation project(':ui-anim-word-lwp')
    implementation project(':ui-timer-lwp')
    implementation project(':data-android')
}

android.applicationVariants.all { variant ->
    def name = variant.getName()
    buildConfigField "boolean", "enableDebugLogging", "false"
    if (name.contains("waterRippleLwp")) {
        def googleServices = file("src/waterRippleLwp/google-services.json")
        if (!googleServices.exists()) {
            Files.copy(file("src/waterRippleLwp/fake-ripple-google-services.json").toPath(), googleServices.toPath())
        }
    }
    if (name.contains("scaryallwhotouch")) {
        def googleServices = file("src/scaryallwhotouch/google-services.json")
        if (!googleServices.exists()) {
            Files.copy(file("src/scaryallwhotouch/fake-scary-google-services.json").toPath(), googleServices.toPath())
        }
    }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
