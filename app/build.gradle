apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply from: '../dependencies.gradle'
apply from: '../spotless.gradle'
apply plugin: 'com.github.ben-manes.versions'

//apply plugin: 'com.google.firebase.crashlytics'


android {

    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        applicationId "com"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        multiDexEnabled true
        buildConfigField("String", "APP_KEY", API_KEY)
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "app"

    productFlavors {

        waterRippleLwp {
            applicationIdSuffix = ".sami.rippel.allah"
            dimension "app"
            versionCode 144012
            versionName "4.1.1"
        }

        scaryallwhotouch {
            applicationIdSuffix = ".liliagame.scarewhotouchme"
            dimension "app"
            resConfigs('ar', 'xxhdpi')
            versionCode 11
            versionName "2.1"
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/MANIFEST.MF'
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true

    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(candidate.version)
    }

    // Example 2: disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }

    // Example 3: using the full syntax
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }

    outputFormatter = { result ->
        def updatable = result.outdated.dependencies
        if (!updatable.isEmpty()) {
            def writer = new StringWriter()
            def html = new groovy.xml.MarkupBuilder(writer)

            html.html {
                body {
                    table {
                        thead {
                            tr {
                                td("Group")
                                td("Module")
                                td("Current version")
                                td("Latest version")
                            }
                        }
                        tbody {
                            updatable.each { dependency ->
                                tr {
                                    td(dependency.group)
                                    td(dependency.name)
                                    td(dependency.version)
                                    td(dependency.available.release ?: dependency.available.milestone)
                                }
                            }
                        }
                    }
                }
            }
            //TODO to File
            println writer.toString()
        }
    }
}


dependencies {
    api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.3'

    implementation libraries.hiltLib
    kapt libraries.hiltAndroidComplier

    kapt libraries.hiltComplier
    implementation libraries.hiltViewModel

    implementation libraries.kotlin
    implementation libraries.appcompat
    implementation libraries.multidex
    implementation libraries.material
    implementation libraries.recyclerview
    implementation libraries.glide
    implementation libraries.constraintlayout
    implementation libraries.retrofit
    implementation libraries.servicesAds
    implementation libraries.coroutinesAndroid
    //implementation libraries.crashlytics
    implementation "com.flipboard:bottomsheet-core:1.5.3"
    implementation "com.flipboard:bottomsheet-commons:1.5.3"
    implementation "com.mani:ThinDownloadManager:1.2.5"
    implementation "com.github.medyo:android-about-page:1.3.1"
    implementation 'com.squareup.retrofit2:converter-simplexml:2.6.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.9'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.github.tbruyelle:rxpermissions:0.12'
    implementation project(':download-file-module')
    implementation project(':base-android')
    implementation project(':domain')
    implementation project(':ui-detail')
    implementation project(':ui-sky-rajawali-lwp')
    implementation project(':ui-anim-img-lwp')
    implementation project(':ui-anim-word-lwp')
    implementation project(':ui-timer-lwp')
    implementation project(':data-android')
}

apply plugin: 'com.google.gms.google-services'
