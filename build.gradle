buildscript {

    apply from: rootProject.file('dependencies.gradle')

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.0-beta03'
        classpath Libs.kotlin.kotlinGradlePlugin
        classpath Libs.google.service
        classpath Libs.hilt.gradlePlugin
        classpath Libs.projectClasspath.spotless
        classpath Libs.projectClasspath.libCheckUpdate
        classpath Libs.google.crashlyticsGradle
    }
}

apply plugin: 'com.github.ben-manes.versions'

allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.google.com" }
        google()
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        java {
            target '**/*.java'
            googleJavaFormat().aosp()
            removeUnusedImports()
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        kotlin {
            target '**/*.kt'
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')
            ktlint(Versions.ktlint)
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        format 'misc', {
            target '**/*.gradle', '**/*.md', '**/.gitignore'
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'xml', {
            target '**/*.xml'
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true

    rejectVersionIf {
        isNonStable(candidate.version)
    }

    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }

    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }

    outputFormatter = 'html'
    outputDir = 'build/dependencyUpdates'
    reportfileName = 'report'
}



